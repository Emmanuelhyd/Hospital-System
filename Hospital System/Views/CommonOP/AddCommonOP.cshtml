@model Hospital_System.Models.MInPatient

@{
    ViewBag.Title = "AddCommonOP";
}

<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f9f9f9;
        margin: 0;
        padding: 20px;
    }

    h2 {
        text-align: center;
        color: #333;
    }

    .form-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 15px; /* Space between grid items */
        max-width: 800px; /* Maximum width for the form */
        margin: 0 auto; /* Center the form */
        background: white; /* White background for form */
        padding: 20px; /* Padding around form */
        border-radius: 8px; /* Rounded corners */
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); /* Subtle shadow */
    }

    .form-group {
        display: flex;
        flex-direction: column;
    }

        .form-group label {
            margin-bottom: 5px;
            color: #555;
        }

        .form-group input[type="text"],
        .form-group input[type="date"],
        .form-group select {
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 16px;
            width: 100%;
            box-sizing: border-box; /* Ensures padding is included in width */
        }

            .form-group input[type="text"][readonly] {
                background-color: #e9ecef; /* Light gray for readonly inputs */
            }

    input[type="submit"] {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 10px 15px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
        grid-column: span 2; /* Span the button across two columns */
        margin-top: 10px;
    }

        input[type="submit"]:hover {
            background-color: #0056b3; /* Darker shade on hover */
        }
</style>

@using (Html.BeginForm("AddCommonOP", "CommonOP"))
{
    <h2>Register OP</h2>
    <div class="form-container">
        <div class="form-group">
            @Html.LabelFor(m => m.Id)
            @Html.TextBoxFor(m => m.Id)
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.PatientName)
            @Html.TextBoxFor(m => m.PatientName, new { @required = "required", @placeholder = "Patient Name" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Problem)
            @Html.TextBoxFor(m => m.Problem, new { @required = "required", @placeholder = "Problem" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Description)
            @Html.TextBoxFor(m => m.Description, new { @required = "required", @placeholder = "Description" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Gender)
            @Html.DropDownListFor(m => m.Gender, new SelectList(new List<SelectListItem>
{
           new SelectListItem{Value="Select Gender",Text="Select Gender"},
           new SelectListItem { Value = "Male", Text = "Male" },
           new SelectListItem { Value = "Female", Text = "Female" },
            new SelectListItem { Value = "Others", Text = "Others" },

       }, "Value", "Text"), "Select Status", new { @class = "form-control" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Address)
            @Html.TextBoxFor(m => m.Address, new { @required = "required", @placeholder = "Address" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.PhoneNumber)
            @Html.TextBoxFor(m => m.PhoneNumber, new
            {
                @required = "required",
                @placeholder = "Phone Number",
                @pattern = @"^[6789]\d{9}$", // Regex pattern for validation
                @title = "Enter a valid 10-digit phone number starting with 6, 7, 8, or 9."
            })
            @Html.ValidationMessageFor(m => m.PhoneNumber, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Date)
            @Html.TextBoxFor(m => m.Date, new { @required = "required", @id = "AppointmentDate", @placeholder = "Appointment Date", @type = "date" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.AdmissionDate)
            @Html.TextBoxFor(m => m.AdmissionDate, new { @id = "AdmissionDate", @placeholder = "Admission Date", @type = "date" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.DischargeDate)
            @Html.TextBoxFor(m => m.DischargeDate, new { @id = "DischargeDate", @placeholder = "Discharge Date", @type = "date" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.TreatmentDuration)
            @Html.TextBoxFor(m => m.TreatmentDuration, new { @id = "TreatmentDuration", @placeholder = "Treatment Duration", @readonly = "readonly" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.PatientType)
            @Html.TextBoxFor(m => m.PatientType, new { @id = "PatientType", @placeholder = "Patient Type", @readonly = "readonly" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Status)
            @Html.DropDownListFor(m => m.Status, new SelectList(new List<SelectListItem>
{
           new SelectListItem{Value="Select Status",Text="Select Gender"},
           new SelectListItem { Value = "intreatment", Text = "InTreatment" },
           new SelectListItem { Value = "discharged", Text = "Discharged" },
            new SelectListItem { Value = "notadmitted", Text = "NotAdmitted" },
            new SelectListItem { Value = "died", Text = "Died" },

       }, "Value", "Text"), "Select Status", new { @class = "form-control" })
        </div>
        <input type="submit" value="Submit">
    </div>
}

<script>
    document.getElementById('AdmissionDate').addEventListener('change', calculateTreatmentDuration);
    document.getElementById('DischargeDate').addEventListener('change', calculateTreatmentDuration);

    function calculateTreatmentDuration() {
        const admissionDateInput = document.getElementById('AdmissionDate').value;
        const dischargeDateInput = document.getElementById('DischargeDate').value;

        if (admissionDateInput && dischargeDateInput) {
            const admissionDate = new Date(admissionDateInput);
            const dischargeDate = new Date(dischargeDateInput);
            const timeDifference = dischargeDate - admissionDate;

            if (timeDifference >= 0) { // Ensure discharge is after admission
                const durationDays = Math.ceil(timeDifference / (1000 * 3600 * 24)); // Convert milliseconds to days
                document.getElementById('TreatmentDuration').value = durationDays;

                // Determine patient type
                document.getElementById('PatientType').value = durationDays === 0 ? "Out Patient" : "In Patient";
            } else {
                document.getElementById('TreatmentDuration').value = "N/A"; // Handle invalid case
                document.getElementById('PatientType').value = ""; // Clear patient type
            }
        } else {
            // If both dates are cleared
            if (!admissionDateInput && !dischargeDateInput) {
                document.getElementById('TreatmentDuration').value = 0; // Set TreatmentDuration to 0
                document.getElementById('PatientType').value = "Out Patient"; // Set PatientType to Out Patient

            } else {
                document.getElementById('TreatmentDuration').value = ""; // Clear if dates are not set
                document.getElementById('PatientType').value = ""; // Clear patient type
            }
        }
    }
</script>





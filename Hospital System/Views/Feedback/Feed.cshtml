@model Hospital_System.Models.Feedbk

@{
    Layout = null;
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

@using (Html.BeginForm())
{
    @TempData["Valid"]
    @TempData["Error"]

    <div class="form-container">
        <h1>Add Feedback</h1>

        <!-- ID (Hidden Field) -->
        @Html.HiddenFor(m => m.Id)

        <!-- Form Fields (2x2 Grid Layout) -->
        <div class="form-grid">
            <!-- Name -->
            <div class="input-group">
                @Html.LabelFor(m => m.Name)
                @Html.TextBoxFor(m => m.Name, new
                {
                    @class = "form-input",
                    @required = "required",
                    @placeholder = "Enter your Name",
                    @pattern = "^[a-zA-Z]+$",
                    @title = "Name should only contain letters"
                })
            </div>

            <!-- Age -->
            <div class="input-group">
                @Html.LabelFor(m => m.Age)
                @Html.TextBoxFor(m => m.Age, new
                {
                    @class = "form-input",
                    @required = "required",
                    @placeholder = "Age",
                    @type = "number",
                    @min = "18",
                    @max = "150",
                    @step = "1",
                    @title = "Enter a valid age between 18 and 150"
                })
            </div>

            <!-- Email -->
            <div class="input-group">
                @Html.LabelFor(m => m.Email)
                @Html.TextBoxFor(m => m.Email, new
                {
                    @class = "form-input",
                    @required = "required",
                    @placeholder = "Email",
                    @type = "email",
                    @title = "Please enter a valid email address"
                })
            </div>

            <!-- Phone Number -->
            <div class="input-group">
                @Html.LabelFor(m => m.phoneNumber)
                @Html.TextBoxFor(m => m.phoneNumber, new
                {
                    @class = "form-input",
                    @required = "required",
                    @placeholder = "Phone Number",
                    @pattern = @"^[6789]\d{9}$",
                    @title = "Please enter a valid 10-digit phone number starting with 6, 7, 8, or 9."
                })
            </div>
        </div>

        <!-- Feedback -->
        <div class="input-group">
            @Html.LabelFor(m => m.Feedback)
            @Html.TextBoxFor(m => m.Feedback, new { @class = "form-input", @required = "required", @placeholder = "Your Valuable Feedback" })
        </div>

        <!-- Ratings (Doctor, Staff, Cleaning, Review) -->
        <div class="rating-container">
            @Html.LabelFor(m => m.Doctor)
            <div class="star-rating" data-input="RatingValue1">
                @for (int i = 1; i <= 5; i++)
                {
                    <span class="fas fa-star @(int.TryParse(Model.Doctor ?? "0", out int doctorRating) && doctorRating >= i ? "active" : "")" data-value="@i"></span>
                }
            </div>
            <input type="hidden" id="RatingValue1" name="Doctor" value="@(Model.Doctor ?? "0")" required />
        </div>

        <div class="rating-container">
            @Html.LabelFor(m => m.Staff)
            <div class="star-rating" data-input="RatingValue2">
                @for (int i = 1; i <= 5; i++)
                {
                    <span class="fas fa-star @(int.TryParse(Model.Staff ?? "0", out int staffRating) && staffRating >= i ? "active" : "")" data-value="@i"></span>
                }
            </div>
            <input type="hidden" id="RatingValue2" name="Staff" value="@(Model.Staff ?? "0")" required />
        </div>

        <div class="rating-container">
            @Html.LabelFor(m => m.Cleaning)
            <div class="star-rating" data-input="RatingValue3">
                @for (int i = 1; i <= 5; i++)
                {
                    <span class="fas fa-star @(int.TryParse(Model.Cleaning ?? "0", out int cleaningRating) && cleaningRating >= i ? "active" : "")" data-value="@i"></span>
                }
            </div>
            <input type="hidden" id="RatingValue3" name="Cleaning" value="@(Model.Cleaning ?? "0")" required />
        </div>

        <div class="rating-container">
            @Html.LabelFor(m => m.Review)
            <div class="star-rating" data-input="RatingValue4">
                @for (int i = 1; i <= 5; i++)
                {
                    <span class="fas fa-star @(int.TryParse(Model.Review ?? "0", out int reviewRating) && reviewRating >= i ? "active" : "")" data-value="@i"></span>
                }
            </div>
            <input type="hidden" id="RatingValue4" name="Review" value="@(Model.Review ?? "0")" required />
        </div>

        <!-- Submit Button -->
        <div>
            <input type="submit" value="Submit" class="submit-button">
        </div>
    </div>
}

<!-- Popup Container -->
<div id="popupMessage" class="popup-message">
    <div class="popup-content">
        <span id="popupClose" class="popup-close">&times;</span>
        <div id="popupIcon" class="popup-icon"></div>
        <p id="popupText"></p>
    </div>
</div>

<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f4f4f4;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0;
        padding: 10px;
    }

    .form-container {
        background-color: #ffffff;
        padding: 30px;
        border-radius: 8px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        max-width: 600px;
        width: 100%;
        box-sizing: border-box;
        transition: all 0.3s ease-in-out;
    }

    h1 {
        text-align: center;
        color: #333;
        margin-bottom: 30px;
    }

    .form-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
        margin-bottom: 20px;
    }

    .input-group {
        margin-bottom: 20px;
    }

        .input-group label {
            display: block;
            margin-bottom: 8px;
            color: #555;
        }

    .form-input {
        width: 100%;
        padding: 12px;
        border: 1px solid #ddd;
        border-radius: 8px;
        transition: all 0.3s ease-in-out;
        box-sizing: border-box;
        font-size: 16px;
    }

        .form-input:focus {
            border-color: #007bff;
            outline: none;
        }

    .submit-button {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 15px;
        border-radius: 8px;
        cursor: pointer;
        width: 100%;
        font-size: 16px;
        transition: all 0.3s ease-in-out;
    }

        .submit-button:hover {
            background-color: #0056b3;
        }

    .rating-container {
        margin-bottom: 20px;
    }

    .star-rating {
        display: flex;
        justify-content: center;
        margin-top: -12px;
        margin-left: 334px;
    }

        .star-rating .fa-star {
            color: lightgray;
            margin-right: 5px;
            transition: color 0.3s;
            cursor: pointer;
        }

            .star-rating .fa-star.active {
                color: gold;
            }

    /* Popup Styling */
    .popup-message {
        display: none;
        position: fixed;
        z-index: 999;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        justify-content: center;
        align-items: center;
    }

    .popup-content {
        background-color: white;
        padding: 30px;
        border-radius: 8px;
        text-align: center;
        max-width: 400px;
        width: 80%;
    }

    .popup-close {
        position: absolute;
        top: 10px;
        right: 10px;
        font-size: 24px;
        cursor: pointer;
    }

        .popup-close:hover {
            color: #f44336;
        }

    .popup-icon {
        font-size: 40px;
        margin-bottom: 10px;
    }

    .popup-success {
        color: green;
    }

    .popup-error {
        color: red;
    }
</style>

<script>
    function setupStarRating(starContainer) {
        const stars = starContainer.querySelectorAll('.fa-star');
        const ratingInput = document.getElementById(starContainer.dataset.input);

        stars.forEach(star => {
            star.addEventListener('click', () => {
                const value = star.getAttribute('data-value');

                stars.forEach(s => s.classList.remove('active'));

                for (let i = 0; i < value; i++) {
                    stars[i].classList.add('active');
                }

                ratingInput.value = value;
            });
        });
    }

    document.querySelectorAll('.star-rating').forEach(setupStarRating);

    // Validate ratings before form submission
    document.querySelector("form").addEventListener("submit", function (event) {
        let valid = true;

        // Check if any of the rating inputs have a value of "0" (i.e., no stars selected)
        const ratingInputs = ['RatingValue1', 'RatingValue2', 'RatingValue3', 'RatingValue4'];
        ratingInputs.forEach(inputId => {
            const ratingInput = document.getElementById(inputId);
            if (ratingInput.value == "0") {
                valid = false;
                alert("Please provide a rating for all categories.");
            }
        });

        // Prevent form submission if any rating is not selected
        if (!valid) {
            event.preventDefault();  // Prevent form submission
        }
    });

    // Display Popup message based on TempData
    window.onload = function () {
        var validMessage = '@TempData["Valid"]';
        var errorMessage = '@TempData["Error"]';

        if (validMessage) {
            showPopup(validMessage, "success");
        } else if (errorMessage) {
            showPopup(errorMessage, "error");
        }
    };

    function showPopup(message, type) {
        var popupMessage = document.getElementById("popupMessage");
        var popupText = document.getElementById("popupText");
        var popupIcon = document.getElementById("popupIcon");

        popupText.textContent = message;

        // Add success or error class
        if (type === "success") {
            popupIcon.innerHTML = "✔️"; // Check mark symbol
            popupMessage.classList.add("popup-success");
        } else {
            popupIcon.innerHTML = "❗"; // Exclamation mark symbol
            popupMessage.classList.add("popup-error");
        }

        // Show popup
        popupMessage.style.display = "flex";

        // Hide popup after 5 seconds
        setTimeout(function () {
            popupMessage.style.display = "none";
        }, 5000);
    }

    document.getElementById("popupClose").addEventListener("click", function () {
        document.getElementById("popupMessage").style.display = "none";
    });
</script>



@model Hospital_System.Models.FeedbackDo

@{
    ViewBag.Title = "AddFeedbackAd";
    Layout = null;
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

@using (Html.BeginForm("AddFeedbackAd", "FeedbackAdmin", FormMethod.Post, new { @class = "form-container" }))
{
    <div>
        <h1>Add Feedback</h1>

        <!-- Feedback Form Fields in Two Columns -->
        <div class="form-row">
            <div class="form-group">
                @Html.LabelFor(m => m.Id)
                @Html.TextBoxFor(m => m.Id, new { @class = "form-control", @placeholder = "ID" })
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.Name)
                @Html.TextBoxFor(m => m.Name, new { @required = "required", @class = "form-control", @placeholder = "Enter your Name" })
            </div>
        </div>

        <div class="form-row">
            <div class="form-group">
                @Html.LabelFor(m => m.Age)
                @Html.TextBoxFor(m => m.Age, new { @required = "required", @class = "form-control", @placeholder = "Age" })
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.Email)
                @Html.TextBoxFor(m => m.Email, new { @required = "required", @class = "form-control", @placeholder = "Email" })
            </div>
        </div>

        <div class="form-row">
            <div class="form-group">
                @Html.LabelFor(m => m.phoneNumber)
                @Html.TextBoxFor(m => m.phoneNumber, new { @required = "required", @class = "form-control", @placeholder = "Phone Number" })
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.Feedback)
                @Html.TextBoxFor(m => m.Feedback, new { @required = "required", @class = "form-control", @placeholder = "Your Valuable Feedback" })
            </div>
        </div>

        <!-- Rating Fields -->
        <div class="rating-container">
            @Html.LabelFor(m => m.Doctor)
            <div class="star-rating" data-input="RatingValue1">
                @for (int i = 1; i <= 5; i++)
                {
                    <span class="fas fa-star @(int.TryParse(Model.Doctor, out int doctorRating) && doctorRating >= i ? "active" : "")" data-value="@i"></span>
                }
            </div>
            <input type="hidden" id="RatingValue1" name="Doctor" value="@(Model.Doctor ?? "0")" />
        </div>

        <div class="rating-container">
            @Html.LabelFor(m => m.Staff)
            <div class="star-rating" data-input="RatingValue2">
                @for (int i = 1; i <= 5; i++)
                {
                    <span class="fas fa-star @(int.TryParse(Model.Staff, out int staffRating) && staffRating >= i ? "active" : "")" data-value="@i"></span>
                }
            </div>
            <input type="hidden" id="RatingValue2" name="Staff" value="@(Model.Staff ?? "0")" />
        </div>

        <div class="rating-container">
            @Html.LabelFor(m => m.Cleaning)
            <div class="star-rating" data-input="RatingValue3">
                @for (int i = 1; i <= 5; i++)
                {
                    <span class="fas fa-star @(int.TryParse(Model.Cleaning, out int cleaningRating) && cleaningRating >= i ? "active" : "")" data-value="@i"></span>
                }
            </div>
            <input type="hidden" id="RatingValue3" name="Cleaning" value="@(Model.Cleaning ?? "0")" />
        </div>

        <div class="rating-container">
            @Html.LabelFor(m => m.Review)
            <div class="star-rating" data-input="RatingValue4">
                @for (int i = 1; i <= 5; i++)
                {
                    <span class="fas fa-star @(int.TryParse(Model.Review, out int reviewRating) && reviewRating >= i ? "active" : "")" data-value="@i"></span>
                }
            </div>
            <input type="hidden" id="RatingValue4" name="Review" value="@(Model.Review ?? "0")" />
        </div>

        <div style="display: flex; justify-content: center; ">
            <input type="submit" class="btn-submit" value="Submit" style="border-color: #e74715">
            <input type="button" class="btn-submit" value="Back" style="border-color: #e74715" onclick="window.location.href='/ReceptionAdmin/ReceptionFrontPage';">

        </div>
    </div>
}

<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f4f4f4;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh; /* Full height of the viewport */
        margin: 0;
        padding: 10px;
    }

    .form-container {
        background-color: #ffffff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        max-width: 600px;
        width: 100%;
        box-sizing: border-box;
    }

    h1 {
        text-align: center;
        color: #333;
    }

    .form-row {
        display: flex;
        justify-content: space-between;
        gap: 20px;
        margin-bottom: 15px;
    }

    .form-group {
        flex: 1; /* Make each form group take up equal space */
    }

    label {
        display: block;
        margin-bottom: 5px;
        color: #555;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
        box-sizing: border-box;
    }

    .submit-button {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 10px 15px;
        border-radius: 4px;
        cursor: pointer;
        width: 100%;
        transition: background-color 0.3s;
    }

    .submit-button:hover {
        background-color: #0056b3;
    }

    .rating-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }

    .star-rating {
        display: flex;
        margin-top: 5px;
    }

    .star-rating .fa-star {
        color: lightgray;
        margin-right: 5px;
        cursor: pointer;
    }

    .star-rating .fa-star.active {
        color: gold;
    }

    /* Ensure responsiveness on smaller screens */
    media (max-width: 600px) {
        .form-row {
            flex-direction: column;
        }

        .form-group {
            margin-bottom: 10px;
        }
    }

    .btn-submit {
        color: #fff;
        background: #e74715;
        background: -webkit-linear-gradient(to top, #d83d0c, #FF5722);
        background: linear-gradient(to top, #d83d0c, #FF5722);
        padding: 4px 34px;
        line-height: 32px;
        border-radius: 3px;
        text-transform: uppercase;
        font-weight: 500;
        font-size: 14px;
    }
</style>

<script>
    function setupStarRating(starContainer) {
        const stars = starContainer.querySelectorAll('.fa-star');
        const ratingInput = document.getElementById(starContainer.dataset.input);

        stars.forEach(star => {
            star.addEventListener('click', () => {
                const value = star.getAttribute('data-value');

                stars.forEach(s => s.classList.remove('active'));
                for (let i = 0; i < value; i++) {
                    stars[i].classList.add('active');
                }

                ratingInput.value = value;
            });
        });
    }

    document.querySelectorAll('.star-rating').forEach(setupStarRating);
</script>

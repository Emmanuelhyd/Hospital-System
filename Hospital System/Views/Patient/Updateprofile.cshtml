@model Hospital_System.Viewmodel.Allview

@{
    ViewBag.Title = "Update Profile";
    Layout = "~/Views/Shared/_PatientLayout.cshtml";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <title>@ViewBag.Title</title>

    <script>
        function Back() {
            window.location.href = "Dashboard";
        }
    </script>

    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f8f9fa;
            margin: 0;
            padding: 0;
        }

        .form-container {
            max-width: 800px;
            margin: 30px auto;
            padding: 20px;
            background-color: #ffffff;
            border-radius: 8px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

            .form-container h1 {
                text-align: center;
                margin-bottom: 20px;
                color: #007bff;
            }

        .form-row {
            display: flex;
            flex-wrap: wrap;
            margin-bottom: 15px;
        }

        .form-group {
            flex: 1;
            margin-right: 10px;
            margin-bottom: 10px;
        }

            .form-group:last-child {
                margin-right: 0;
            }

            .form-group label {
                font-weight: bold;
                margin-bottom: 5px;
                color: #495057;
            }

            .form-group input,
            .form-group select {
                width: 75%;
                padding: 10px;
                border: 1px solid #ced4da;
                border-radius: 4px;
                box-sizing: border-box;
            }

            .form-group .text-danger {
                color: #d78484;
                font-size: 0.875rem;
                font-weight: 600;
                font-style: oblique;
            }

        .btn-submit {
            display: block;
            width: 53%;
            padding: 12px;
            font-size: 1rem;
            color: #fff;
            background-color: dodgerblue;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s, transform 0.2s;
            margin: 10px auto;
        }

            .btn-submit:hover {
                background-color: #218838;
                transform: scale(1.05);
            }

        /*.back-icon {
            text-decoration: none;
            color: dodgerblue;
            font-size: 30px;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
        }

            .back-icon i {
                margin-right: 8px;*/ /* Space between icon and text */
            /*}*/
        .button-back {
            display: inline-block;
            margin: 10px 0;
            padding: 10px 20px;
            color: white;
            background-color: dodgerblue;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
        }

            .button-back:hover {
                background-color: #0056b3;
            }
    </style>
</head>
<body>
    <div class="form-container">
        @*<div>
            <a href="javascript:void(0);" onclick="Back()" class="back-icon">
                <i class="fas fa-arrow-circle-left"></i>

            </a>
        </div>*@
        <button class="button-back" onclick="Back()"><i class="fas fa-arrow-left"></i>Back </button>
        <h1>@ViewBag.Title</h1>

        <div style="margin-bottom: 20px;">
            <strong>Patient ID:</strong> @ViewBag.PatientId<br />
            <strong>User Name:</strong> @Session["UserName"]<br />
        </div>

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(m => m.Patients.PatientId)

            <div class="form-row">
                <div class="form-group">
                    @Html.LabelFor(m => m.Patients.UserNameOrEmail)
                    @Html.TextBoxFor(m => m.Patients.UserNameOrEmail, new { @class = "form-control", @readonly = "readonly", Value = @Session["UserName"] })
                    @Html.ValidationMessageFor(m => m.Patients.UserNameOrEmail, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Patients.FirstName)
                    @Html.TextBoxFor(m => m.Patients.FirstName, new { @placeholder = "First Name", @class = "form-control", @required = "required", Value = Session["FirstName"] })
                    @Html.ValidationMessageFor(m => m.Patients.FirstName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    @Html.LabelFor(m => m.Patients.LastName)
                    @Html.TextBoxFor(m => m.Patients.LastName, new { @placeholder = "Last Name", @class = "form-control", Value = @Session["LastName"] })<br />
                    @Html.ValidationMessageFor(m => m.Patients.LastName, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Patients.Email)
                    @Html.TextBoxFor(m => m.Patients.Email, new { @required = "required", @placeholder = "Email", @class = "form-control", @type = "email", Value = @Session["Email"] })<br />
                    @Html.ValidationMessageFor(m => m.Patients.Email, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    @Html.LabelFor(m => m.Patients.BloodGroup)
                    @Html.DropDownListFor(m => m.Patients.BloodGroup, Model.BloodGroups, "Select Blood Group", new { @class = "form-control", @required = "required", Value = @Session["BloodGroups"] })<br />
                    @Html.ValidationMessageFor(m => m.Patients.BloodGroup, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Patients.Gender)
                    @Html.DropDownListFor(m => m.Patients.Gender, Model.GetGenders, "Select Gender", new { @class = "form-control", @required = "required", Value = @Session["Gender"] })<br />
                    @Html.ValidationMessageFor(m => m.Patients.Gender, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    @Html.LabelFor(m => m.Patients.Age)
                    <div style="display: flex; align-items: center;">
                        <button type="button" class="btn btn-secondary" onclick="changeAge(1)" style="border-radius: 0; border: 1px solid #ccc;">▲</button>
                        @Html.TextBoxFor(m => m.Patients.Age, new { @placeholder = "Age", @class = "form-control", @required = "required", @min = "0", @max = "120", @id = "ageInput", @style = "width: 70px; text-align: center;", Value = @Session["Age"] })
                        <button type="button" class="btn btn-secondary" onclick="changeAge(-1)" style="border-radius: 0; border: 1px solid #ccc;">▼</button>
                    </div>
                    <br />
                    @Html.ValidationMessageFor(m => m.Patients.Age, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Patients.PhoneNo)
                    @Html.TextBoxFor(m => m.Patients.PhoneNo, new
                    {
                        @class = "form-control",
                        placeholder = "Enter Phone Number",
                        @pattern = @"^[6789]\d{9}$",
                        @title = "Phone number must be 10 digits and start with 6, 7, 8, or 9.",
                        @required = "required"
                    })<br />
                    @Html.ValidationMessageFor(m => m.Patients.PhoneNo, "", new { @class = "text-danger", Value = @Session["PhoneNo"] })
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    @Html.LabelFor(m => m.Patients.EmergencyContact)
                    @Html.TextBoxFor(m => m.Patients.EmergencyContact, new { @class = "form-control", placeholder = "Enter Emergency Contact", Value = @Session["EmergencyContact"] })<br />
                    @Html.ValidationMessageFor(m => m.Patients.EmergencyContact, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Patients.Address)
                    @Html.TextBoxFor(m => m.Patients.Address, new { @placeholder = "Address", @class = "form-control", @required = "required", Value = @Session["Address"] })<br />
                    @Html.ValidationMessageFor(m => m.Patients.Address, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-row">
                <input type="submit" value="Update Profile" class="btn-submit" />
            </div>
        }

        @TempData["Message"]
    </div>

    <script>
        function changeAge(delta) {
            const ageInput = document.getElementById('ageInput');
            let currentValue = parseInt(ageInput.value) || 0; // Default to 0 if not a number
            let newValue = currentValue + delta;

            // Ensure new value is within the min and max limits
            if (newValue < 0) newValue = 0;
            if (newValue > 120) newValue = 120;

            ageInput.value = newValue; // Update the input value
        }
    </script>
</body>
</html>
